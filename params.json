{"name":"Bureaucrat","body":"Bureaucrat\r\n==========\r\n\r\nForm handling for Ruby inspired by [Django forms](https://docs.djangoproject.com/en/dev/#forms).\r\n\r\nDescription\r\n-----------\r\n\r\nBureaucrat is a library for handling the processing, validation and rendering of HTML forms.\r\n\r\nStructure of a Form\r\n-------------------\r\n\r\n                     Form ----> valid?, errors/cleaned_data\r\n                ______|________\r\n              /       |         \\\r\n          Field     Field      Field  ----> clean\r\n            |         |          |\r\n          Widget    Widget     Widget ----> render\r\n\r\n**Form**:\r\nCollection of named Fields, handles global validation and the last pass of\r\ndata conversion.\r\nAfter validation, a valid Form responds to `cleaned_data` by returning a\r\nhash of validated values and an invalid Form responds to `errors` by\r\nreturning a hash of field_name => error_messages.\r\n\r\n**Field**:\r\nHandles the validation and data conversion of each field belonging to the Form. Each Field is associated to a name on the parent Form.\r\n\r\n**Widget**:\r\nHandles the rendering of a Form field. Each Field has two widgets associated, one for normal rendering, and another for hidden inputs rendering. Every type of Field has default Widgets defined, but they can be overriden on a per-Form basis.\r\n\r\nUsage examples\r\n--------------\r\n\r\n```ruby\r\nrequire 'bureaucrat'\r\nrequire 'bureaucrat/quickfields'\r\n\r\nclass MyForm < Bureaucrat::Forms::Form\r\n  extend Bureaucrat::Quickfields\r\n\r\n  string  :nickname, max_length: 50\r\n  string  :realname, required: false\r\n  email   :email\r\n  integer :age, min_value: 0\r\n  boolean :newsletter, required: false\r\n\r\n  # Note: Bureaucrat doesn't define save\r\n  def save\r\n    user = User.create!(cleaned_data)\r\n    Mailer.deliver_confirmation_mail(user)\r\n    user\r\n  end\r\nend\r\n\r\n# A Form initialized without parameters is an unbound Form.\r\nunbound_form = MyForm.new\r\nunbound_form.valid? # => false\r\nunbound_form.errors # => {}\r\nunbound_form.cleaned_data # => nil\r\nputs unbound_form.as_p\r\n# Prints:\r\n# <p><label for=\"id_nickname\">Nickname:</label> <input type=\"text\" name=\"nickname\" id=\"id_nickname\" maxlength=\"50\" /></p>\r\n# <p><label for=\"id_realname\">Realname:</label> <input type=\"text\" name=\"realname\" id=\"id_realname\" /></p>\r\n# <p><label for=\"id_email\">Email:</label> <input type=\"text\" name=\"email\" id=\"id_email\" /></p>\r\n# <p><label for=\"id_age\">Age:</label> <input type=\"text\" name=\"age\" id=\"id_age\" /></p>\r\n# <p><label for=\"id_newsletter\">Newsletter:</label> <input type=\"checkbox\" name=\"newsletter\" id=\"id_newsletter\" /></p>\r\n\r\ninvalid_bound_form = MyForm.new(nickname: 'bureaucrat', email: 'badformat', age: '30')\r\ninvalid_bound_form.valid? # => false\r\ninvalid_bound_form.errors # {email: [\"Enter a valid e-mail address.\"]}\r\ninvalid_bound_form.cleaned_data # => nil\r\nputs invalid_bound_form.as_table\r\n# Prints:\r\n# <tr><th><label for=\"id_nickname\">Nickname:</label></th><td><input type=\"text\" value=\"bureaucrat\" name=\"nickname\" id=\"id_nickname\" maxlength=\"50\" /></td></tr>\r\n# <tr><th><label for=\"id_realname\">Realname:</label></th><td><ul class=\"errorlist\"><li>This field is required</li></ul><input type=\"text\" name=\"realname\" id=\"id_realname\" /></td></tr>\r\n# <tr><th><label for=\"id_email\">Email:</label></th><td><ul class=\"errorlist\"><li>Enter a valid e-mail address.</li></ul><input type=\"text\" value=\"badformat\" name=\"email\" id=\"id_email\" /></td></tr>\r\n# <tr><th><label for=\"id_age\">Age:</label></th><td><input type=\"text\" value=\"30\" name=\"age\" id=\"id_age\" /></td></tr>\r\n# <tr><th><label for=\"id_newsletter\">Newsletter:</label></th><td><input type=\"checkbox\" name=\"newsletter\" id=\"id_newsletter\" /></td></tr>\r\n\r\nvalid_bound_form = MyForm.new(nickname: 'bureaucrat', email: 'valid@email.com', age: '30')\r\nvalid_bound_form.valid? # => true\r\nvalid_bound_form.errors # {}\r\nvalid_bound_form.cleaned_data # => {age: 30, newsletter: false, nickname: \"bureaucrat\", realname: \"\", :email = >\"valid@email.com\"}\r\nputs valid_bound_form.as_ul\r\n# Prints:\r\n# <li><label for=\"id_nickname\">Nickname:</label> <input type=\"text\" value=\"bureaucrat\" name=\"nickname\" id=\"id_nickname\" maxlength=\"50\" /></li>\r\n# <li><ul class=\"errorlist\"><li>This field is required</li></ul><label for=\"id_realname\">Realname:</label> <input type=\"text\" name=\"realname\" id=\"id_realname\" /></li>\r\n# <li><label for=\"id_email\">Email:</label> <input type=\"text\" value=\"valid@email.com\" name=\"email\" id=\"id_email\" /></li>\r\n# <li><label for=\"id_age\">Age:</label> <input type=\"text\" value=\"30\" name=\"age\" id=\"id_age\" /></li>\r\n# <li><label for=\"id_newsletter\">Newsletter:</label> <input type=\"checkbox\" name=\"newsletter\" id=\"id_newsletter\" /></li>\r\n\r\nvalid_bound_form.save # A new User is created and a confirmation mail is delivered\r\n```\r\n\r\nExamples of different ways of defining forms\r\n--------------\r\n\r\n```ruby\r\nrequire 'bureaucrat'\r\nrequire 'bureaucrat/quickfields'\r\n\r\nclass MyForm < Bureaucrat::Forms::Form\r\n  include Bureaucrat::Fields\r\n\r\n  field :nickname, CharField.new(max_length: 50)\r\n  field :realname, CharField.new(required: false)\r\n  field :email, EmailField.new\r\n  field :age, IntegerField.new(min_value: 0)\r\n  field :newsletter, BooleanField.new(required: false) \r\nend\r\n\r\nclass MyFormQuick < Bureaucrat::Forms::Form\r\n  extend Bureaucrat::Quickfields\r\n\r\n  string  :nickname, max_length: 50\r\n  string  :realname, required: false\r\n  email   :email\r\n  integer :age, min_value: 0\r\n  boolean :newsletter, required: false\r\nend\r\n\r\ndef inline_form\r\n  f = Class.new(Bureaucrat::Forms::Form)\r\n  f.extend(Bureaucrat::Quickfields)\r\n  yield f\r\n  f\r\nend\r\n\r\nform_maker = inline_form do |f|\r\n  f.string  :nickname, max_length: 50\r\n  f.string  :realname, required: false\r\n  f.email   :email\r\n  f.integer :age, min_value: 0\r\n  f.boolean :newsletter, required: false\r\nend\r\n```\r\n","tagline":"Form handling for Ruby inspired by Django forms. ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}